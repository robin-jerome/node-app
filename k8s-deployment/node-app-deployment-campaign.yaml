kind: Service
apiVersion: v1
metadata:
  name:  node-app-campaign
spec:
  selector:
    run: node-app-campaign
  type:  ClusterIP
  ports:
  - name:  http
    port:  80
    targetPort:  80
---
#apiVersion: apps/v1 #v1.9.x
apiVersion: extensions/v1beta1 #v1.8.x
kind: Deployment
metadata:
  name: node-app-campaign
  labels:
    run: node-app-campaign
spec:
  replicas: 3
  selector:
    matchLabels:
      run: node-app-campaign
  strategy:
    type: RollingUpdate
    rollingUpdate:
      #the maximum number of pods that can be created above the total desired number during rollout
      maxSurge: 1
      #the maximum number of pods that is unavailable during the rollout
      maxUnavailable: 1
  template:
    metadata:
      labels:
        run: node-app-campaign
    spec:
      containers:
      # NodeJs application container
      - image: rjerome/node-app:campaign
        imagePullPolicy: Always
        name: node-app-campaign
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        ports:
        - containerPort:  8080
      # Service Envoy Proxy Sidecar Container
      - image: envoyproxy/envoy-alpine:v1.6.0
        command: 
          - "/usr/local/bin/envoy"
        args:
          - "--config-path /etc/envoy/envoy.json"
          - "--mode serve"
        imagePullPolicy: Always
        name: envoy
        livenessProbe:
          httpGet:
            path: /healthz
            port: 80
        readinessProbe:
          httpGet:
            path: /healthz
            port: 80
        ports:
        - containerPort: 80
          protocol: TCP
        volumeMounts:
        - name: envoy
          mountPath: /etc/envoy
      volumes:
      - name: envoy
        configMap:
          name: node-app-envoy-config